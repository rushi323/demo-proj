name: Terraform Multi-Env Pipeline with KinD + Security + Docker Hub

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches:
      - "*"   # Any branch push triggers pipeline

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init -backend=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: TFLint (Static Analysis)
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --chdir=terraform

  security:
    name: Security Scan (Checkov)
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v2
      - name: Run Checkov (Terraform IaC Security Scan)
        run: |
          pip install checkov
          checkov -d terraform

  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - uses: actions/checkout@v2

      # üîë Login to Docker Hub using secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üõ†Ô∏è Build & Push Image
      - name: Build & Push Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest ./helm/myapp
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest

      # üîç Trivy Scan
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
          severity: CRITICAL,HIGH
          ignore-unfixed: true

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Dev)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Dev)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Deploy MyApp from Docker Hub
        run: |
          kubectl create deployment myapp --image=${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest -n demo-namespace
          kubectl expose deployment myapp --port=80 --target-port=80 -n demo-namespace

      - name: Health Check
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/myapp -n demo-namespace
          kubectl get pods -n demo-namespace

      - name: Curl MyApp Service
        run: |
          kubectl port-forward svc/myapp 8080:80 -n demo-namespace &
          sleep 5
          curl -I http://localhost:8080

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Staging)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Staging)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Deploy MyApp from Docker Hub
        run: |
          kubectl create deployment myapp --image=${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest -n demo-namespace
          kubectl expose deployment myapp --port=80 --target-port=80 -n demo-namespace

      - name: Integration Test
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/myapp -n demo-namespace
          curl -I http://localhost:8080 || true

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Prod)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Prod)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Deploy MyApp from Docker Hub
        run: |
          kubectl create deployment myapp --image=${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest -n demo-namespace
          kubectl expose deployment myapp --port=80 --target-port=80 -n demo-namespace

      - name: Prod Monitoring Check
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/myapp -n demo-namespace
          curl -I http://localhost:8080 || true

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo
