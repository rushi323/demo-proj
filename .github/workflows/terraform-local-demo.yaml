name: Terraform Multi-Env with KinD + Terraform + Helm

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches:
      - "*"   # run on any branch push

permissions:
  contents: read
  packages: write    # needed to push to GHCR

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (no backend)
        run: terraform -chdir=terraform init -backend=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: Run TFLint
        run: tflint --chdir=terraform

  security:
    name: IaC Security (Checkov)
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov
        run: |
          pip install --quiet checkov
          checkov -d terraform

  build_image:
    name: Build & Push Image to GHCR
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (GHCR)
        run: |
          docker build -t ghcr.io/${{ github.repository }}/myapp:latest ./helm/myapp
          docker push ghcr.io/${{ github.repository }}/myapp:latest

      - name: Trivy Scan (report only)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/myapp:latest
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 0

  deploy_dev:
    name: Deploy to Dev (KinD + Terraform + Helm)
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: azure/setup-helm@v4

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Dev)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Dev)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Check Dev secrets
        run: |
          if [ -z "${{ secrets.DEV_DB_USER }}" ] || [ -z "${{ secrets.DEV_DB_PASS }}" ]; then
            echo "❌ Missing DEV secrets!"
            exit 1
          fi

      - name: Helm Lint (Dev)
        run: helm lint ./helm/myapp

      - name: Helm Deploy (Dev)
        run: |
          helm upgrade --install myapp ./helm/myapp \
            --namespace demo-namespace --create-namespace \
            -f helm/myapp/values-dev.yaml \
            --set env.DB_USER=${{ secrets.DEV_DB_USER }} \
            --set env.DB_PASS=${{ secrets.DEV_DB_PASS }}

      - name: Curl Service (Dev)
        run: |
          kubectl port-forward svc/myapp 8080:80 -n demo-namespace &
          sleep 4
          curl -I http://localhost:8080 || true

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo

  deploy_staging:
    name: Deploy to Staging (KinD + Terraform + Helm)
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: azure/setup-helm@v4

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Staging)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Staging)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Check Staging secrets
        run: |
          if [ -z "${{ secrets.STAGING_DB_USER }}" ] || [ -z "${{ secrets.STAGING_DB_PASS }}" ]; then
            echo "❌ Missing STAGING secrets!"
            exit 1
          fi

      - name: Helm Lint (Staging)
        run: helm lint ./helm/myapp

      - name: Helm Deploy (Staging)
        run: |
          helm upgrade --install myapp ./helm/myapp \
            --namespace demo-namespace --create-namespace \
            -f helm/myapp/values-staging.yaml \
            --set env.DB_USER=${{ secrets.STAGING_DB_USER }} \
            --set env.DB_PASS=${{ secrets.STAGING_DB_PASS }}

      - name: Curl Service (Staging)
        run: |
          kubectl port-forward svc/myapp 8080:80 -n demo-namespace &
          sleep 4
          curl -I http://localhost:8080 || true

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo

  deploy_prod:
    name: Deploy to Prod (KinD + Terraform + Helm)
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: azure/setup-helm@v4

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Prod)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Prod)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Check Prod secrets
        run: |
          if [ -z "${{ secrets.PROD_DB_USER }}" ] || [ -z "${{ secrets.PROD_DB_PASS }}" ]; then
            echo "❌ Missing PROD secrets!"
            exit 1
          fi

      - name: Helm Lint (Prod)
        run: helm lint ./helm/myapp

      - name: Helm Deploy (Prod)
        run: |
          helm upgrade --install myapp ./helm/myapp \
            --namespace demo-namespace --create-namespace \
            -f helm/myapp/values-prod.yaml \
            --set env.DB_USER=${{ secrets.PROD_DB_USER }} \
            --set env.DB_PASS=${{ secrets.PROD_DB_PASS }}

      - name: Curl Service (Prod)
        run: |
          kubectl port-forward svc/myapp 8080:80 -n demo-namespace &
          sleep 4
          curl -I http://localhost:8080 || true

      - name: Cleanup KinD
        if: always()
        run: kind delete cluster --name demo
