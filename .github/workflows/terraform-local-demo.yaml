name: Terraform Multi-Env Pipeline with KinD + Security

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches:
      - "*"   # Any branch push triggers pipeline

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init -backend=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: TFLint (Static Analysis)
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --chdir=terraform

  security:
    name: Security Scan (Checkov)
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v2
      - name: Run Checkov (Terraform IaC Security Scan)
        run: |
          pip install checkov
          checkov -d terraform

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [security]   # Runs only if security scan passes
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      # Spin up KinD cluster for plan
      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -input=false

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [plan]
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name demo
          kubectl cluster-info

      - name: Terraform Init (Dev)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Dev)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Smoke Test
        run: kubectl get ns

      # Save kubeconfig for reuse in staging/prod
      - name: Export kubeconfig
        run: kind get kubeconfig --name demo > kubeconfig
      - uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

  image-scan:
    name: Container Security Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    steps:
      - uses: actions/checkout@v2

      # Build local Docker image for scanning
      - name: Build Docker Image
        run: |
          docker build -t myapp:latest ./helm/myapp || echo "Skipping image build if no Dockerfile"

      # Run Trivy scan
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:latest
          severity: CRITICAL,HIGH
          ignore-unfixed: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [image-scan]
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: .kube
      - run: mkdir -p ~/.kube && cp .kube/kubeconfig ~/.kube/config

      - name: Terraform Init (Staging)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Staging)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Integration Tests
        run: echo "Run API/service tests here"

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: .kube
      - run: mkdir -p ~/.kube && cp .kube/kubeconfig ~/.kube/config

      - name: Terraform Init (Prod)
        run: terraform -chdir=terraform init

      - name: Terraform Apply (Prod)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Monitoring Check
        run: echo "Simulate Prometheus/Grafana/CloudWatch monitoring check"
